import { h, defineComponent, watch, ref } from "#imports";
import type { PropType } from "#imports";

import { schema } from "prosemirror-schema-basic";
import { EditorState, Transaction } from "prosemirror-state";
import { EditorView } from "prosemirror-view";
import { DOMParser } from "prosemirror-model";
import { toggleMark } from "prosemirror-commands";

// https://mattboldt.github.io/typed.js/
// https://github.com/duskmoon314/vue3-typed-js
export default defineComponent({
  name: "Editor",
  props: {
    modelValue: {
      type: Object as PropType<string>, // Type Annotation
      default: () => (''),
    },
  },
  emits: ['update:modelValue'],
  setup(props, context) {

    const elementRef = ref();
    const initialContent = ref();
    const value = ref();

    const state = EditorState.create({
      doc: DOMParser.fromSchema(schema).parse(initialContent)
    });


    const dispatchTransaction = (transaction: Transaction) => {
      const newState = view.state.apply(transaction);
      view.updateState(newState);
      value.value = elementRef.value.querySelector(".ProseMirror").innerHTML;
    }
    //
    const view = new EditorView(this.$refs.editor, {
      state: this.state,
      dispatchTransaction: dispatchTransaction
    });

    //
    return () => h(
      "div",
      {
        ref: elementRef
      },
      undefined
    );
  },
});