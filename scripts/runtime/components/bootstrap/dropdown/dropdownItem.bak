<template>
 <li
  v-bind="attrs"
 >
  <Icon
   v-if="icon && !iconEnd"
   :icon="icon"
   :color="iconColor"
  />
  <slot />
  <Icon
   v-if="icon && iconEnd"
   :icon="icon"
   :color="iconColor"
  />
 </li>
</template>

<script setup lang="ts">
import { hProps } from '../../../composables/utils/useProps';
import { BlockProps, useBlock } from '../../../composables/base/useBlock';
import { ActiveProps, useActive } from '../../../composables/bootstrap/useItemsActive';
import { IDProps, useID } from '../../../composables/attributes/useID';
import { ToggleProps, useToggle } from '../../../composables/bootstrap/useToggle';
import Icon from '../../../components/icon/icon';
import { useScrollSpyItem } from '../../../composables/bootstrap/useScrollSpyItem';
import {
 useAnchor,
 AnchorProps,
} from '../../../composables/html/useAnchor';
import { ref } from '#imports';
//
const props = defineProps({
 ...AnchorProps,
 ...BlockProps,
 ...ActiveProps,
 ...IDProps,
 ...ToggleProps,
 icon: {
  type: String,
  default: undefined,
 },
 iconEnd: {
  type: Boolean,
  default: false,
 },
 iconColor: {
  type: String,
  default: undefined,
 },
});

//
const block = useBlock(props);
const id = useID(props, 'list-item');
const elementRef = ref<HTMLElement>();
const active = useActive(props, 'list', elementRef);
const toggle = useToggle(props, elementRef);
const anchor = useAnchor(props);
const spyItem = useScrollSpyItem(props, elementRef);
//
const current = {
 class: {
  'dropdown-item': true,
 },
 ref: elementRef,
};
const attrs = hProps(id, anchor, block, active, toggle, spyItem, current);
//
</script>
